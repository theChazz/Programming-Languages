@page
@model WebApp.Pages.Courses.IndexModel
@{
    ViewData["Title"] = "Courses";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Courses</h2>
        <a href="/Courses/Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New Course
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Course Name</th>
                            <th>Category</th>
                            <th>Difficulty</th>
                            <th>Created At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="courseTableBody">
                        <!-- Courses will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        
        async function loadCourses() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/Course`);
                if (!response.ok) throw new Error('Failed to fetch courses');
                
                const courses = await response.json();
                const courseTableBody = document.getElementById('courseTableBody');
                
                courseTableBody.innerHTML = courses.map(course => `
                    <tr>
                        <td>${escapeHtml(course.courseName)}</td>
                        <td>${escapeHtml(course.category || '-')}</td>
                        <td>${escapeHtml(course.difficulty || '-')}</td>
                        <td>${new Date(course.createdAt).toLocaleDateString()}</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/Courses/Details/${course.id}" class="btn btn-info btn-sm">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/Courses/Edit/${course.id}" class="btn btn-primary btn-sm">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button class="btn btn-danger btn-sm" onclick="deleteCourse(${course.id})">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load courses', 'danger');
            }
        }

        async function deleteCourse(id) {
            if (!confirm('Are you sure you want to delete this course?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/api/Course/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    let errorMsg = 'Failed to delete course';
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorData.title || errorMsg;
                    } catch (e) { /* Ignore if response body is not JSON */ }
                    throw new Error(errorMsg);
                }

                const responseText = await response.text();
                if (response.status === 204 || !responseText) {
                    showAlert('Course deleted successfully!', 'success');
                } else {
                    try {
                        const result = JSON.parse(responseText);
                        showAlert(result.message || 'Course deleted successfully!', 'success');
                    } catch (e) {
                        showAlert('Course deleted successfully! (non-JSON response)', 'success');
                    }
                }

                loadCourses();
            } catch (error) {
                console.error('Error deleting course:', error);
                showAlert(error.message || 'Failed to delete course', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        document.addEventListener('DOMContentLoaded', loadCourses);
    </script>
} 