@page
@model WebApp.Pages.ProgramCourses.IndexModel
@{
    ViewData["Title"] = "Program Courses";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Program Courses</h2>
        <a href="/ProgramCourses/Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New Program Course
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Program</th>
                            <th>Course</th>
                            <th>Is Compulsory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="programCoursesTableBody">
                        <!-- Data will be loaded dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        
        async function loadProgramCourses() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/ProgramCourse`);
                if (!response.ok) throw new Error('Failed to fetch program courses');
                
                const programCourses = await response.json();
                const tableBody = document.getElementById('programCoursesTableBody');
                tableBody.innerHTML = ''; // Clear existing rows
                
                programCourses.forEach(pc => {
                    // console.log('Processing ProgramCourse:', pc); // Remove console log
                    const row = document.createElement('tr');
                    // Use nested properties: pc.program.name and pc.course.courseName
                    const programName = pc.program ? pc.program.name : 'N/A';
                    const courseName = pc.course ? pc.course.courseName : 'N/A';
                    
                    row.innerHTML = `
                        <td>${programName}</td> 
                        <td>${courseName}</td> 
                        <td>
                            <span class="badge ${pc.isCompulsory ? 'bg-success' : 'bg-secondary'}">
                                ${pc.isCompulsory ? 'Yes' : 'No'}
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/ProgramCourses/Details/${pc.id}" 
                                   class="btn btn-info btn-sm">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/ProgramCourses/Edit/${pc.id}" 
                                   class="btn btn-primary btn-sm">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button onclick="deleteProgramCourse(${pc.id})" 
                                        class="btn btn-danger btn-sm">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading program courses:', error);
                showAlert('Failed to load program courses', 'danger');
            }
        }

        async function deleteProgramCourse(id) {
            if (!confirm('Are you sure you want to delete this program course?')) {
                return;
            }

            try {
                const response = await fetch(
                    `${apiBaseUrl}/api/ProgramCourse/${id}`,
                    { method: 'DELETE' }
                );

                if (!response.ok) throw new Error('Failed to delete program course');
                
                showAlert('Program course deleted successfully', 'success');
                await loadProgramCourses(); // Reload the list after delete
            } catch (error) {
                console.error('Error deleting program course:', error);
                showAlert('Failed to delete program course', 'danger');
            }
        }

        function showAlert(message, type) {
            // Create alert element
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            // Prepend alert to the main container
            const container = document.querySelector('.container');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
            } else {
                // Fallback if container isn't found
                document.body.insertBefore(alertDiv, document.body.firstChild);
            }
            
            
            // Auto-dismiss after 3 seconds
            setTimeout(() => {
                 // Check if the alert still exists before trying to remove
                 if (alertDiv.parentNode) {
                    const bsAlert = bootstrap.Alert.getInstance(alertDiv);
                    if (bsAlert) {
                        bsAlert.close();
                    } else {
                        // Fallback if bootstrap instance not found (e.g., element removed manually)
                        alertDiv.remove();
                    }
                 }
            }, 3000);
        }

        // Initialize the page by loading program courses
        document.addEventListener('DOMContentLoaded', loadProgramCourses);
    </script>
}
