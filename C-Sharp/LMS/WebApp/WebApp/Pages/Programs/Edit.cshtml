@page "{id:int}"
@model WebApp.Pages.Programs.EditModel
@{
    ViewData["Title"] = "Edit Program";
}

<div class="container mt-4">
    <h2>Edit Program</h2>
    <form id="editProgramForm" class="card">
        <div class="card-body">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" required>
            </div>
            <div class="mb-3">
                <label for="code" class="form-label">Code</label>
                <input type="text" class="form-control" id="code" required>
            </div>
            <div class="mb-3">
                <label for="level" class="form-label">Level</label>
                <input type="text" class="form-control" id="level" required>
            </div>
            <div class="mb-3">
                <label for="department" class="form-label">Department</label>
                <input type="text" class="form-control" id="department" required>
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type</label>
                <input type="text" class="form-control" id="type" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" rows="3" required></textarea>
            </div>
            <div class="mb-3">
                <label for="durationMonths" class="form-label">Duration (Months)</label>
                <input type="number" class="form-control" id="durationMonths" required min="1">
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="/Programs" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        const programId = '@Model.Id';
        
        async function loadProgramDetails() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/Program/${programId}`);
                if (!response.ok) throw new Error('Failed to load program details');
                
                const program = await response.json();
                document.getElementById('name').value = program.name;
                document.getElementById('code').value = program.code;
                document.getElementById('level').value = program.level;
                document.getElementById('department').value = program.department;
                document.getElementById('type').value = program.type;
                document.getElementById('description').value = program.description;
                document.getElementById('durationMonths').value = program.durationMonths;
            } catch (error) {
                console.error('Error:', error);
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Error loading program details';
                alert.style.display = 'block';
            }
        }

        document.getElementById('editProgramForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const programData = {
                name: document.getElementById('name').value,
                code: document.getElementById('code').value,
                level: document.getElementById('level').value,
                department: document.getElementById('department').value,
                type: document.getElementById('type').value,
                description: document.getElementById('description').value,
                durationMonths: parseInt(document.getElementById('durationMonths').value),
                status: 'Active'
            };

            try {
                const response = await fetch(`${apiBaseUrl}/api/Program/${programId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(programData)
                });

                if (!response.ok) throw new Error('Failed to update program');
                
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-success';
                alert.textContent = 'Program updated successfully';
                alert.style.display = 'block';
                
                setTimeout(() => {
                    window.location.href = '/Programs';
                }, 1000);
            } catch (error) {
                console.error('Error:', error);
                const alert = document.getElementById('alert');
                alert.className = 'alert alert-danger';
                alert.textContent = 'Error updating program';
                alert.style.display = 'block';
            }
        });

        document.addEventListener('DOMContentLoaded', loadProgramDetails);
    </script>
} 