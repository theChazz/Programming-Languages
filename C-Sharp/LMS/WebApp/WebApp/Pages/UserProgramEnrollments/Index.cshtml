@page
@model WebApp.Pages.UserProgramEnrollments.IndexModel
@{
    ViewData["Title"] = "User Program Enrollments";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>User Program Enrollments</h2>
        <a href="/UserProgramEnrollments/Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New Enrollment
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>User ID</th>
                            <th>User Name</th>
                            <th>Program ID</th>
                            <th>Program Name</th>
                            <th>Status</th>
                            <th>Enrolled At</th>
                            <th>Expected Completion</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="enrollmentTableBody">
                        <!-- User Program Enrollments will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="alert" class="alert mt-3" style="display: none;"></div>
</div>

@section Scripts {
    <script>
        const apiBaseUrl = '@Configuration["ApiSettings:BaseUrl"]';
        
        async function loadUserProgramEnrollments() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/UserProgramEnrollment`);
                if (!response.ok) throw new Error('Failed to fetch enrollments');
                
                const enrollments = await response.json();
                const enrollmentTableBody = document.getElementById('enrollmentTableBody');
                
                enrollmentTableBody.innerHTML = enrollments.map(enrollment => `
                    <tr>
                        <td>${escapeHtml(enrollment.userId)}</td>
                        <td>${escapeHtml(enrollment.user?.fullName || 'N/A')}</td>
                        <td>${escapeHtml(enrollment.programId)}</td>
                        <td>${escapeHtml(enrollment.program?.name || 'N/A')}</td>
                        <td>${escapeHtml(enrollment.status)}</td>
                        <td>${enrollment.enrolledAt ? new Date(enrollment.enrolledAt).toLocaleDateString() : 'N/A'}</td>
                        <td>${enrollment.expectedCompletionDate ? new Date(enrollment.expectedCompletionDate).toLocaleDateString() : 'N/A'}</td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/UserProgramEnrollments/Details/${enrollment.id}" class="btn btn-info btn-sm">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                <a href="/UserProgramEnrollments/Edit/${enrollment.id}" class="btn btn-primary btn-sm">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button class="btn btn-danger btn-sm" onclick="deleteEnrollment(${enrollment.id})">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            } catch (error) {
                console.error('Error:', error);
                showAlert('Failed to load enrollments', 'danger');
            }
        }

        async function deleteEnrollment(id) {
            if (!confirm('Are you sure you want to delete this enrollment?')) {
                return;
            }

            try {
                const response = await fetch(`${apiBaseUrl}/api/UserProgramEnrollment/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    let errorMsg = 'Failed to delete enrollment';
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorData.title || errorMsg;
                    } catch (e) { /* Ignore if response body is not JSON */ }
                    throw new Error(errorMsg);
                }

                const responseText = await response.text();
                if (response.status === 204 || !responseText) {
                    showAlert('Enrollment deleted successfully!', 'success');
                } else {
                    try {
                        const result = JSON.parse(responseText);
                        showAlert(result.message || 'Enrollment deleted successfully!', 'success');
                    } catch (e) {
                        showAlert('Enrollment deleted successfully! (non-JSON response)', 'success');
                    }
                }

                loadUserProgramEnrollments();
            } catch (error) {
                console.error('Error deleting enrollment:', error);
                showAlert(error.message || 'Failed to delete enrollment', 'danger');
            }
        }

        function showAlert(message, type) {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type} mt-3`;
            alert.textContent = message;
            alert.style.display = 'block';
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        document.addEventListener('DOMContentLoaded', loadUserProgramEnrollments);
    </script>
}
